generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = "mysql://root:@localhost:3306/e-commerce_typescript"
}
enum Role {
    user
    admin
}
model User {
    id               Int        @id @default(autoincrement())
    name             String
    email            String     @unique
    phone            String     @unique
    password         String
    passwordChangeAt DateTime?
    image            String    @default("https://res.cloudinary.com/dw0cormzj/image/upload/v1679430518/Youth%20Welfare/Student/profile_dteqac.jpg")
    cloudinary_id    String     @default("default")
    role             Role     @default(user)
    Isverified       Boolean    @default(false)
    emailToken       String?
    isActive         Boolean    @default(true)
    wishlist         Wishlist[]
    addresses        Address[]
    createdAt        DateTime   @default(now())
    updatedAt        DateTime   @updatedAt
    reviews          Review[]
    cart            Cart?
    orders           Order[]
}

model Category {
    id            Int       @id @default(autoincrement())
    name          String
    slug          String
    image         String?
    cloudinary_id String?
    products      Product[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Brand {
    id            Int       @id @default(autoincrement())
    name          String
    slug          String
    image         String?
    cloudinary_id String?
    products      Product[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Product {
    id                 Int        @id @default(autoincrement())
    name               String
    slug               String
    quantity           Int        @default(0)
    description        String
    price              Float
    priceAfterDiscount Float
    sold               Int        @default(0)
    countryOfOrigin    String
    image              String?
    cloudinary_id      String?
    category           Category   @relation(fields: [categoryId], references: [id])
    categoryId         Int
    brand              Brand      @relation(fields: [brandId], references: [id])
    brandId            Int
    averageRating      Float?
    ratingCount        Int        @default(0)
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
    reviews            Review[]
    wishlists          Wishlist[]
    userId             Int?
    cartItems          CartItem[]
}

model Address {
    id        Int      @id @default(autoincrement())
    details   String
    street    String
    phone     String
    city      String
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    order     Order    @relation(fields: [orderId], references: [id])
    orderId   Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Review {
    id        Int      @id @default(autoincrement())
    content   String
    rating    Float
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Wishlist {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id                      Int        @id @default(autoincrement())
    cartItems               CartItem[]
    totalCartPrice          Float
    totalPriceAfterDiscount Float
    discount                Float
    user             User       @relation(fields: [userId], references: [id])
  userId           Int        @unique
    createdAt               DateTime   @default(now())
    updatedAt               DateTime   @updatedAt
}

model CartItem {
    id        Int     @id @default(autoincrement())
   cart             Cart       @relation(fields: [cartId], references: [id])
  cartId           Int
    order     Order   @relation(fields: [orderId], references: [id])
    orderId   Int
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    quantity  Int     @default(1)
    price     Float
}

model Order {
    id                Int        @id @default(autoincrement())
    user              User       @relation(fields: [userId], references: [id])
    userId            Int
    cartItems         CartItem[]
    taxPrice          Float      @default(0)
    shippingAddress   Address[]
    shippingPrice     Float      @default(0)
    totalOrderPrice   Float
    paymentMethodType String     @default("cash")
    isPaid            Boolean    @default(false)
    paidAt            DateTime?
    isDelivered       Boolean    @default(false)
    deliveredAt       DateTime?
    createdAt         DateTime   @default(now())
    updatedAt         DateTime   @updatedAt
}
